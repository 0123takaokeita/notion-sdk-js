{"version":3,"file":"Client.js","sourceRoot":"","sources":["../../src/Client.ts"],"names":[],"mappings":"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","sourcesContent":["import { LogLevel, logLevelSeverity } from './logging';\nimport { pick } from './helpers';\nimport {\n  DatabasesRetrieveParameters, DatabasesRetrieveResponse, databasesRetrieve,\n  DatabasesQueryResponse, DatabasesQueryParameters, databasesQuery,\n} from './api-endpoints';\n\nimport got, { Got, Options as GotOptions, Headers as GotHeaders } from 'got';\n\n\nexport interface ClientOptions {\n  auth?: string;\n  timeoutMs?: number;\n  baseUrl?: string;\n  logLevel?: LogLevel;\n}\n\nexport interface RequestParameters {\n  path: string;\n  method: Method;\n  query?: QueryParams;\n  body?: Record<string, unknown>;\n  auth?: string;\n}\n\nexport default class Client {\n\n  #auth?: string;\n  #logLevel: LogLevel;\n  #got: Got;\n\n  public constructor(options?: ClientOptions) {\n    this.#auth = options?.auth;\n    this.#logLevel = options?.logLevel ?? LogLevel.WARN;\n\n    const prefixUrl = (options?.baseUrl ?? 'https://api.notion.com') + '/v1/';\n    const timeout = options?.timeoutMs ?? 60_000;\n\n    this.#got = got.extend({\n      prefixUrl,\n      timeout,\n      headers: {\n        // TODO: update with format appropriate for telemetry, use version from package.json\n        'user-agent': 'notion:client/v0.1.0',\n      },\n      retry: 0,\n    });\n  }\n\n  /**\n   * Sends a request.\n   *\n   * @param path\n   * @param method\n   * @param query\n   * @param body\n   * @returns\n   */\n  public async request<Response>({ path, method, query, body, auth }: RequestParameters): Promise<Response> {\n    this.log(LogLevel.INFO, `request start`, { method, path });\n\n    // TODO: check error conditions and throw the appropriate error\n    const response = this.#got(path, {\n      method,\n      searchParams: query,\n      json: body,\n      headers: this.authAsHeaders(auth),\n    }).json<Response>();\n\n    this.log(LogLevel.INFO, `request end`, { method, path });\n    return response;\n  }\n\n  /*\n   * Notion API endpoints\n   */\n\n  public readonly databases = {\n    /**\n     * Retrieve a database\n     */\n    retrieve: (args: WithAuth<DatabasesRetrieveParameters>): Promise<DatabasesRetrieveResponse> => {\n      return this.request<DatabasesRetrieveResponse>({\n        path: databasesRetrieve.path(args),\n        method: databasesRetrieve.method,\n        query: pick(args, databasesRetrieve.queryParams),\n        body: pick(args, databasesRetrieve.bodyParams),\n        auth: args.auth,\n      });\n    },\n\n    /**\n     * Query a database\n     */\n    query: (args: WithAuth<DatabasesQueryParameters>): Promise<DatabasesQueryResponse> => {\n      return this.request<DatabasesQueryResponse>({\n        path: databasesQuery.path(args),\n        method: databasesQuery.method,\n        query: pick(args, databasesQuery.queryParams),\n        body: pick(args, databasesQuery.bodyParams),\n        auth: args.auth,\n      });\n    },\n  };\n\n  /**\n   * Emits a log message to the console.\n   *\n   * @param level The level for this message\n   * @param args Arguments to send to the console\n   */\n  private log(level: LogLevel, ...args: unknown[]) {\n    if (logLevelSeverity(level) >= logLevelSeverity(this.#logLevel)) {\n      console.log(`${this.constructor.name} ${level}: `, ...args);\n    }\n  }\n\n  /**\n   * Transforms an API key or access token into a headers object suitable for an HTTP request.\n   *\n   * This method uses the instance's value as the default when the input is undefined. If neither are defined, it returns\n   * an empty object\n   *\n   * @param auth API key or access token\n   * @returns headers key-value object\n   */\n  private authAsHeaders(auth?: string): GotHeaders {\n    const headers: GotHeaders = {};\n    const authHeaderValue = auth ?? this.#auth;\n    if (authHeaderValue !== undefined) {\n      headers['authorization'] = `Bearer ${authHeaderValue}`;\n    }\n    return headers;\n  }\n}\n\n/*\n * Type aliases to support the generic request interface.\n */\ntype Method = 'get' | 'post' | 'patch';\ntype QueryParams = GotOptions['searchParams'];\n\n\ntype WithAuth<P> = P & { auth?: string };\n"]}